# This is a basic workflow to help you get started with Actions

name: sonarqube

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: logs-vaivoa-turma1  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: src/LogsVaivoa    # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.x'              # set this to the dotnet version to use
  #ROOT_SOLUTION_PATH: src

jobs:
  build-and-deploy:
    runs-on: windows-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Setup sonarqube 
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-sonarscanner
    - name: Run Sonarqube scanner
      shell: pwsh
      run: |
        dotnet sonarscanner begin /k:"Logs" /d:sonar.host.url=${{secrets.SONAR_HOST}} /d:sonar.qualitygate.wait=true /d:sonar.login=${{secrets.SONAR_TOKEN}} /d:sonar.projectBaseDir="./${{env.AZURE_FUNCTIONAPP_PACKAGE_PATH}}"
        dotnet build ${{env.AZURE_FUNCTIONAPP_PACKAGE_PATH}}
        dotnet sonarscanner end /d:sonar.login=${{secrets.SONAR_TOKEN}}
